#!/usr/bin/php -q
<?php
/* 
 * Used to create a VM with no disks from a ECL file path.
 * Will also create appropriate VIFs.
 * Will NOT create VBs.
 */


include_once("/usr/local/sbin/common_lib");
include_once("xen_common");
include_once("engine_common");

$metaConverter = "/home/alike/converterleg.exe";

//  echo shell_exec("sudo /usr/local/sbin/startAlike");
// exec("touch /home/alike/Alike/agentShare/seed");

$me = pathinfo(__FILE__, PATHINFO_FILENAME);
if(count($argv) < 3) {
	echo "Usage: $me eclFile srId\n";
	exit();
}
$eclFile = $argv[1];
$srId = $argv[2];
echo "Ecl is $eclFile\n";

$meta = engine_getMetaInfo($eclFile);
$jason = shell_exec("echo $meta |$metaConverter");
$xm = json_decode($jason);
//var_dump($xm);
//var_dump(engine_getEclHeader($eclFile));

//echo "Sounds like a cool guy\n";
xen_connect(1);
//echo xen_call("vm-list"); 
$xen_params = array(
"VCPUs-max" 		=> "#numCPUs",
"VCPUs-at-startup" 	=> "#numCPUs",
"name-label" 		=> "#name",
"name-description" 	=> "#description",
"HVM-boot-policy" 	=> "#hVMBootPolicy",
"HVM-boot-params" 	=> "#hVMBootParams",
"HVM-shadow-multiplier" => "#hVMShadowMultiplier",
"PV-args" 		=> "#pVArgs",
"PV-bootloader" 	=> "pVBootloader",
"PV-bootloader-args" 	=> "#pVBootloaderArgs",
"PV-kernel" 		=> "#pVKernel",
"actions-after-reboot"	=> "restart",
"platform" 		=> "#platform",
"memory-static-max" 	=> "#memoryStaticMax",
"memory-dynamic-max"    => "#memoryDynamicMax",
"memory-dynamic-min"    => "#memoryDynamicMin",
"memory-static-min"     => "#memoryStaticMin",

//"memory_limits" => ["#memoryDynamicMin", "#memoryDynamicMax", "#memoryDynamicMin", "#memoryDynamicMax"],
);


	
function guessAXenNetwork() {
	$rez = xen_call("network-list params=uuid");
	$lines = preg_split("/\r\n|\n|\r/", $rez);
	$uuids = array();
	foreach($lines as $l) {
		//echo "Line is: $l\n";
		$splits = preg_split("/\:/", $l);
		if(count($splits) > 1){
			$ud = trim($splits[1]);
			//echo "Split found! $ud\n";
			array_push($uuids, $ud);
		}
	}
	$good_uuids = array();
	foreach($uuids as $u) {
		$rez = xen_call("network-param-list", "uuid=$u");
		//echo "Rez is $rez\n";
		if(stripos($rez, "host internal") || stripos($rez, "host_internal")) {
			//echo "Skipping host-internal vileness!\n";
			continue;
		}
		array_push($good_uuids, $u);
	}
	if(count($good_uuids) == 0) {
		return "";
	}
	return $good_uuids[0];
		
}

function logWarningOnNonEmpty($rez, $deets) {
	 if(empty(trim($rez)) == false) {
     		syslog(LOG_WARNING, "Xen returned error $rez for $deets");
       	}
}

function callAllArray($key, $array) {
	global $uuid;
	foreach($array as $i) {
		$rez = xen_call("vm-param-set", "uuid=$uuid", "$key:$i");
		logWarningOnNonEmpty($rez, "vm-set param $key:$i");
	}
}

// Create the VM
$rez = makeBlankVmXen($xm->name, $srId);
$rez = trim($rez);
if(stripos($rez, "invalid") !== false) {
	throw new ErrorException("Cannot create a new VM on SR $srId, Xen returned $rez");
}
$uuid = $rez;
	


//var_dump($xen_params);
//$uuid = $xm->uuid;
foreach($xen_params as $k => $v) {
	$val = $v;
	if(substr($v, 0, 1) == '#') {
		$val = substr($v, 1);
		$val = ((array) $xm)[$val];
		if(is_array($val)) {
			callAllArray($k, $val);
			continue;
		} else if(strpos($val, ' ') !== false) {
			//echo "BINGO\n";
			$val = "\"$val\"";
		}
	}
	//echo "Would call \"vm-param-get\", \"uuid=$uuid\", \"$k=$val\"\n";
	$rez =xen_call("vm-param-set", "uuid=$uuid", "$k=$val");
	logWarningOnNonEmpty($rez, "vm-param-set $k=$val");
	//echo xen_call("vm-param-get", "uuid=$uuid", "param-name=$k");
}
// Handle VIFS
$i = 0;
foreach($xm->VIFS as $v) {
	$network = xen_call("network-param-get", "param-name=uuid", "uuid=$v->netuuid");
	if(stripos($network, "invalid") === false) {
		syslog(LOG_INFO, "Existing assigned Xen network for VM $uuid with vif $v->mac not found, finding new ones on this host");
		// Grab a network from somewhere good
		$network = guessAXenNetwork();
		
	}
	if(empty($network)) {
		syslog(LOG_WARNING, "No appropriate Xen network found for VM $uuid VIF $v->mac");
		continue;
	}
	$rez = xen_call("vif-create", "device=$i", "network-uuid=$network", "vm-uuid=$uuid", "mac=$v->mac");
	$rez = trim($rez);
	if(stripos($rez, "invalid") !== false) {
		syslog(LOG_WARNING, "cannot create a new VIF for VM $uuid, Xen returned $rez");
	} else {
		if($v->mtu == 0) {
			continue;
		}
		syslog(LOG_INFO, "VM $uuid has a vif with MTU set to $v->mtu, will set other-config of it...");
		// Set MTU
		$rez = xen_call("vif-param-set", "uuid=$rez", "other-config:mtu=$v->mtu");
		$rez = trim($rez); 
		if(stripos($rez, "invalid") !== false) {
                	syslog(LOG_WARNING, "cannot set MTU for VIF of VM $uuid, Xen returned $rez");
		}
	}
	
	$i++;
}



?>
